<Shapes xmlns="http://www.evolus.vn/Namespace/Pencil"
xmlns:p="http://www.evolus.vn/Namespace/Pencil"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"
id="nz.nwatson.AndroidLollipop"
displayName="Android Lollipop"
description="UI components from Android 5.0 (Lollipop)"
author="Nathaniel Watson (nwatson.nz)"
url="https://github.com/nathanielw/Andriod-Lollipop-Pencil-Stencils">

	<Properties>
		<PropertyGroup>
			<Property name="iconBg" displayName="Icon background color" type="Color">#ffffff49</Property>
		</PropertyGroup>
		<PropertyGroup name="Text">
			<Property name="defaultTextFont" type="Font" displayName="Default Font">Roboto, Arial, sans-serif|400|normal|14px</Property>
			<Property name="defaultTextColor" type="Color" displayName="Default Text Color">#212121ff</Property>
		</PropertyGroup>
		<PropertyGroup name="Line">
			<Property name="strokeColor" type="Color" displayName="Default Line Color">#0000001F</Property>
			<Property name="strokeStyle" type="StrokeStyle" displayName="Default Line Style">1|</Property>
		</PropertyGroup>
		<PropertyGroup name="Background">
			<Property name="fillColor" type="Color" displayName="Default Background Color">#00bcd4ff</Property>
		</PropertyGroup>
		<PropertyGroup name="Background">
			<Property name="neutralFillColor" type="Color" displayName="Neutral Background Color">#FAFAFAFF</Property>
		</PropertyGroup>
	</Properties>


	<Script>
		<![CDATA[

		collection.log = function (str) {
			Components.classes['@mozilla.org/consoleservice;1']
			.getService(Components.interfaces.nsIConsoleService)
			.logStringMessage(str);
		}

		collection.setCssTextAlignment = function(css, h, v) {
			switch (parseInt(h, 10)) {
				case 0:
					css.set("text-align", "left");
					break;
				case 1:
					css.set("text-align", "center");
					break;
				case 2:
					css.set("text-align", "right");
					break;
			}

			switch (parseInt(v, 10)) {
				case 0:
					css.set("vertical-align", "top");
					break;
				case 1:
					css.set("vertical-align", "middle");
					break;
				case 2:
					css.set("vertical-align", "bottom");
					break;
			}
		}

		]]>
	</Script>

	<Shape id="ActionBar" displayName="Action Bar" icon="Icons/ActionBar.png">
		<Properties>
			 <PropertyGroup>
				  <Property name="box" type="Dimension">360,56</Property>
			 </PropertyGroup>
			 <PropertyGroup name="Background">
				  <Property name="fillColor" displayName="Color" type="Color"><E>$$fillColor</E></Property>
			 </PropertyGroup>
		</Properties>
		<Behaviors>
			<For ref="bg">
				 <Box>$box</Box>
				 <Fill>$fillColor</Fill>
			</For>
			<For ref="shadow">
				<Transform>[translate(0, $box.h), scale($box.w, 1)]</Transform>
			</For>
		</Behaviors>

		<p:Content	 xmlns:p="http://www.evolus.vn/Namespace/Pencil"
										xmlns="http://www.w3.org/2000/svg">

			 <defs>
			<linearGradient
				id="shadowFill"
				x1="0%"
				y1="0%"
				x2="0%"
				y2="100%" >

				<stop
					id="stop1"
					offset="0"
					style="stop-color:#000000;stop-opacity:0.259" />
				<stop
					id="stop2"
					offset="1"
					style="stop-color:#000000;stop-opacity:0" />
			</linearGradient>
			 </defs>
			 <rect
			 id="bg" />
		 <rect
			 id="shadow"
			 width="1" height="6"
			 style="fill: url(#shadowFill)" />
		</p:Content>
	</Shape>

	<Shape id="NotificationBar" displayName="Notification Bar" icon="Icons/NotificationBar.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockHeight="true">360,24</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Background color" type="Color">#00000025</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<Box>$box</Box>
				<Fill>$fillColor</Fill>
			</For>
			<For ref="icons">
				<Transform>[translate($box.w - 120, 5)]</Transform>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
		           xmlns="http://www.w3.org/2000/svg">

			<defs>
				<linearGradient id="statusIconBg">
					<stop
					style="stop-color:#ffffff;stop-opacity:0.28627452;"
					offset="0" />
				</linearGradient>
				<linearGradient id="statusIconFg">
					<stop
						style="stop-color:#ffffff;stop-opacity:0.90196079;"
						offset="0" />
				</linearGradient>
			</defs>

			<rect height="24"
			      p:lockH="true"
			      id="bg" />

			<g id="icons">

				<g style="fill: url(#statusIconBg)">
					<path d="m0 2.532c4.821-3.376 11.239-3.376 16.06 0l-8.03 11.468z"/>
					<path d="m28.662 14l14-14v14z"/>
					<path d="m60.662 0v1h-1c-.554 0-1 .446-1 1v11c0 .554.446 1 1 1h7c.554 0 1-.446 1-1v-11c0-.554-.446-1-1-1h-1v-1h-5"/>
				</g>

				<g style="fill: url(#statusIconFg)">
					<path d="m2.026 5.426c3.605-2.524 8.403-2.524 12.01 0l-6 8.575z"/>
					<path d="m28.662 14l7-7v7z"/>
					<path d="m58.662 7v6c0 .554.446 1 1 1h7c.554 0 1-.446 1-1v-6z"/>

					<path d="m82.71 13h-.879v-9.609l-2.9 1.077v-.82l3.633-1.348h.146v10.701"/>
					<path d="m93.63 13h-6.68v-.674l3.494-3.962c.327-.371.603-.706.828-1 .229-.298.413-.574.549-.828.142-.259.242-.5.3-.725.063-.229.095-.457.095-.681 0-.322-.049-.615-.146-.879-.093-.269-.234-.5-.425-.696-.186-.195-.417-.347-.696-.454-.278-.107-.598-.161-.959-.161-.371 0-.706.063-1 .19-.293.122-.544.293-.754.513-.205.22-.364.481-.476.784-.112.303-.168.632-.168.989h-.872c0-.439.073-.854.22-1.245.151-.391.369-.732.652-1.025.283-.293.625-.525 1.025-.696.405-.171.864-.256 1.377-.256.479 0 .911.066 1.296.198.386.127.713.315.981.564.269.244.474.544.615.901.146.352.22.752.22 1.201 0 .322-.059.647-.176.974-.117.327-.273.652-.469.974-.195.322-.42.642-.674.959-.254.317-.515.63-.784.938l-2.974 3.362h5.603v.74"/>
					<path d="m95.2 12.473c0-.171.054-.315.161-.432.112-.122.266-.183.461-.183.195 0 .349.061.461.183.112.117.168.261.168.432 0 .171-.056.313-.168.425-.112.107-.266.161-.461.161-.195 0-.349-.054-.461-.161-.107-.112-.161-.254-.161-.425m.015-6.76c0-.171.054-.315.161-.432.112-.122.266-.183.461-.183.195 0 .349.061.461.183.112.117.168.261.168.432 0 .171-.056.313-.168.425-.112.107-.266.161-.461.161-.195 0-.349-.054-.461-.161-.107-.112-.161-.254-.161-.425"/>
					<path d="m100.38 7.192h.894c.41 0 .769-.054 1.077-.161.312-.112.574-.261.784-.447.21-.19.366-.41.469-.659.107-.254.161-.522.161-.806 0-.322-.046-.615-.139-.879-.088-.269-.225-.498-.41-.688-.181-.195-.413-.347-.696-.454-.278-.107-.61-.161-.996-.161-.337 0-.647.051-.93.154-.283.103-.53.249-.74.439-.21.19-.374.422-.491.696-.117.269-.176.571-.176.908h-.879c0-.43.081-.825.242-1.187.166-.361.391-.671.674-.93.288-.264.627-.466 1.018-.608.396-.146.823-.22 1.282-.22.469 0 .896.066 1.282.198.386.132.713.325.981.579.273.249.483.557.63.923.151.366.227.786.227 1.26 0 .239-.039.479-.117.718-.078.234-.193.457-.344.667-.151.21-.342.403-.571.579-.229.171-.493.313-.791.425.352.098.654.232.908.403.254.166.461.361.623.586.166.225.288.471.366.74.083.269.124.549.125.842 0 .483-.083.913-.249 1.289-.166.376-.396.696-.688.959-.293.259-.64.457-1.04.593-.4.132-.835.198-1.304.198-.435 0-.857-.063-1.267-.19-.405-.127-.769-.315-1.091-.564-.317-.254-.574-.571-.769-.952-.19-.381-.286-.825-.286-1.333h.879c0 .337.061.647.183.93.127.283.303.527.527.732.225.2.491.356.798.469.313.112.654.168 1.025.168.757 0 1.345-.193 1.765-.579.425-.391.637-.955.637-1.692 0-.386-.066-.718-.198-.996-.127-.278-.31-.505-.549-.681-.234-.181-.518-.312-.85-.396-.327-.083-.691-.125-1.091-.125h-.894v-.747"/>
					<path d="m113.18 8.554c0 .781-.073 1.46-.22 2.036-.146.576-.359 1.055-.637 1.436-.278.376-.62.657-1.025.842-.405.186-.867.278-1.384.278-.513 0-.972-.093-1.377-.278-.405-.186-.75-.466-1.033-.842-.283-.381-.5-.859-.652-1.436-.151-.576-.227-1.255-.227-2.036v-1.802c0-.781.073-1.458.22-2.029.151-.576.366-1.05.645-1.421.283-.376.627-.654 1.033-.835.405-.186.864-.278 1.377-.278.513 0 .972.093 1.377.278.41.181.754.459 1.033.835.283.371.498.845.645 1.421.151.571.227 1.248.227 2.029v1.802m-.879-1.912c0-1.221-.2-2.144-.601-2.769-.396-.625-.996-.937-1.802-.938-.801 0-1.401.313-1.802.938-.4.625-.601 1.548-.601 2.769v2.01c0 .601.051 1.135.154 1.604.103.464.254.857.454 1.179.205.317.459.559.762.725.303.166.652.249 1.047.249.4 0 .749-.083 1.047-.249.303-.166.552-.408.747-.725.2-.322.349-.715.447-1.179.098-.469.146-1 .146-1.604v-2.01"/>
				</g>
			</g>
		</p:Content>
	</Shape>

	<Shape id="SoftKeys" displayName="Soft keys" icon="Icons/SoftKeys.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockHeight="true">360,48</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color">#000000FF</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<Box>$box</Box>
				<Fill>$fillColor</Fill>
			</For>
			<For ref="icons">
				<Transform>[translate(($box.w / 2) - 108, 15)]</Transform>
			</For>
		</Behaviors>

		<p:Content	 xmlns:p="http://www.evolus.vn/Namespace/Pencil"
						xmlns="http://www.w3.org/2000/svg">

			<rect id="bg" />
			<g id="icons" style="stroke-width: 2px; stroke:#FFFFFF; stroke-opacity:0.9; fill: none;stroke-linejoin:round">
				<path d="m202.17 2h12c.554 0 1 .446 1 1v12c0 .554-.446 1-1 1h-12c-.554 0-1-.446-1-1v-12c0-.554.446-1 1-1z"/>
				<path d="m15.168 9c0 10.196 1.286 9.454-7.544 4.356-8.83-5.098-8.83-3.613 0-8.711 8.83-5.098 7.544-5.841 7.544 4.356z"/>
				<path d="m116.17 9c0 4.418-3.582 8-8 8-4.418 0-8-3.582-8-8 0-4.418 3.582-8 8-8 4.418 0 8 3.582 8 8z"/>
			</g>
		</p:Content>
	</Shape>

	<Shape id="BottomSheet" displayName="Bottom Sheet" icon="Icons/BottomSheet.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">360,224</Property>

				<Property name="height" displayName="Height"
					type="Handle"
					p:lockX="true"
					p:minX="0"
					p:maxX="$box.h">0,50</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Sheet Color" type="Color"><E>$$neutralFillColor</E></Property>
				<Property name="bgColor" displayName="Background Color" type="Color">#0000002B</Property>
			</PropertyGroup>
		</Properties>

		<Actions>
			<Action id="getSnappingGuide">
				<Impl>
				return [
					new SnappingData("Division", this.getBounding().y + this.getProperty("height").y, "HCenter", false, this.id)
				];
				</Impl>
			</Action>
		</Actions>
		<Behaviors>
			<For ref="bg">
				<Box>new Dimension($box.w, $height.y)</Box>
				<Fill>$bgColor</Fill>
			</For>
			<For ref="sheet">
				<Box>new Dimension($box.w, $box.h - $height.y)</Box>
				<Fill>$fillColor</Fill>
				<Transform>[translate(0, $height.y)]</Transform>
			</For>
			<For ref="shadow">
				<Transform>[translate(0, $height.y -6), scale($box.w, 1)]</Transform>
			</For>
		</Behaviors>
		<p:Content	 xmlns:p="http://www.evolus.vn/Namespace/Pencil"
										xmlns="http://www.w3.org/2000/svg">

			<defs>
				<linearGradient
					id="shadowFill"
					x1="0%"
					y1="0%"
					x2="0%"
					y2="100%" >

					<stop
						id="stop1"
						offset="0"
						style="stop-color:#000000;stop-opacity:0" />
					<stop
						id="stop2"
						offset="1"
						style="stop-color:#000000;stop-opacity:0.129" />
				</linearGradient>
			</defs>
			<rect id="bg" />
			<rect id="sheet" />
	 		<rect id="shadow"
			width="1" height="6"
			style="fill: url(#shadowFill)" />
		</p:Content>
	</Shape>

	<Shape id="Button" displayName="Button" icon="Icons/Button.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">96,36</Property>
				<Property name="shadow" displayName="Shadow" type="Bool">true</Property>
				<Property name="forceFont" displayName="Force Roboto font" type="Bool">false</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color">#FFFFFF</Property>
			</PropertyGroup>

			<PropertyGroup name="Text">
				<Property name="label" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: Bound.fromBox($box, 0, 5), font: $textFont, align: $textAlign, multi: false})"><![CDATA[BUTTON]]></Property>

				<Property name="textColor" displayName="Color"
					type="Color"><E>$$defaultTextColor</E></Property>
				<Property name="textFont"
					displayName="Font"
					type="Font"><E>$$defaultTextFont</E></Property>

				<Property name="textAlign" displayName="Text Alignment" type="Alignment">1,1</Property>
			</PropertyGroup>
		</Properties>
		<Behaviors>
			<For ref="bg">
				<Box>$box</Box>
				<Fill>$fillColor</Fill>
			</For>

			<For ref="shadow">
				<ApplyFilter>$shadow</ApplyFilter>
				<Visibility>$shadow</Visibility>
			</For>

			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="text">
				<DomContent>
					<![CDATA[

					var specs = [];

					var text = $label.value;

					var css = new CSS();

					css.set("display", "table-cell");
					css.set("height", $box.h + "px");
					css.set("width", $box.w + "px");

					collection.setCssTextAlignment(css, $textAlign.h, $textAlign.v);

					if ($forceFont.value) {
						css.set("font-family", "Roboto, sans-serif");
						css.set("font-weight", "500");
					}

					specs.push({
						_name: "div",
						_uri: "http://www.w3.org/1999/xhtml",
						_text: text,
						style: css
					});

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>

				<Font>$textFont</Font>
                <Color>$textColor</Color>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">

			<defs>
				<filter id="dropShadow">
					<feFlood
						flood-opacity="0.35"
						flood-color="rgb(0,0,0)"
						result="flood"
						id="flood" />
					<feComposite
						in="flood"
						in2="SourceGraphic"
						operator="in" />
					<feGaussianBlur
						stdDeviation="2" />
					<feOffset
						dx="0"
						dy="1" />
				</filter>

				<rect id="bg" rx="2px" ry="2px" />
			</defs>

			<use xlink:href="#bg" id="shadow" p:heavy="true" p:filter="url(#dropShadow)" />
			<use xlink:href="#bg" />

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<div id="text">
				    	<!-- content -->
					</div>
				</div>
			</foreignObject>
		</p:Content>
	</Shape>

	<Shortcut displayName="Button (Colored)" icon="Icons/ButtonColored.png" to="Button">
		<PropertyValue name="fillColor"><E>$$fillColor</E></PropertyValue>
		<PropertyValue name="textColor">#FFFFFF</PropertyValue>
	</Shortcut>

	<Shortcut displayName="Button (Flat)" icon="Icons/ButtonFlat.png" to="Button">
		<PropertyValue name="fillColor">#FFFFFF00</PropertyValue>
		<PropertyValue name="textColor"><E>$$defaultTextColor</E></PropertyValue>
		<PropertyValue name="shadow">false</PropertyValue>
	</Shortcut>

	<Shape id="FloatingActionButton" displayName="Floating Action Button" icon="Icons/FloatingActionButton.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockRatio="true">56,56</Property>
				<Property name="shadow" displayName="Shadow" type="Bool">true</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<EllipseFit>$box</EllipseFit>
				<Fill>$fillColor</Fill>
			</For>
			<For ref="shadow">
				<ApplyFilter>$shadow</ApplyFilter>
				<Visibility>$shadow</Visibility>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">

			<defs>
                <filter id="dropShadow" height="1.2558399" y="-0.12792" width="1.06396" x="-0.03198">
					<feFlood
						flood-opacity="0.35"
						flood-color="rgb(0,0,0)"
						result="flood"
						id="flood" />
					<feComposite
						in="flood"
						in2="SourceGraphic"
						operator="in" />
					<feGaussianBlur
						stdDeviation="2" />
					<feOffset
						dx="0"
						dy="1" />
                </filter>

				<ellipse id="bg" rx="23" ry="23" />
			</defs>

			<use xlink:href="#bg" id="shadow" p:heavy="true" p:filter="url(#dropShadow)" />
			<use xlink:href="#bg" />
		</p:Content>
	</Shape>

	<Shortcut displayName="Floating Action Button (Small)" icon="Icons/FloatingActionButtonSmall.png" to="FloatingActionButton">
		<PropertyValue name="box">40,40</PropertyValue>
	</Shortcut>

	<Shape id="Card" displayName="Card" icon="Icons/Card.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">344,224</Property>
				<Property name="shadow" displayName="Shadow" type="Bool">true</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Sheet Color" type="Color"><E>$$neutralFillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Actions>
			<Action id="getSnappingGuide">
				<Impl>
					var b = this.getBounding();
					return [
						new SnappingData("Top", b.y, "HCenter", false, this.id),
						new SnappingData("Bottom", b.y + b.height, "HCenter", false, this.id)
					];
				</Impl>
			</Action>
		</Actions>

		<Behaviors>
			<For ref="card">
				<Box>$box</Box>
				<Fill>$fillColor</Fill>
			</For>
			<For ref="shadow">
				<ApplyFilter>$shadow</ApplyFilter>
				<Visibility>$shadow</Visibility>
			</For>
		</Behaviors>
		<p:Content	 xmlns:p="http://www.evolus.vn/Namespace/Pencil"
										xmlns="http://www.w3.org/2000/svg">

			<defs>
				<filter id="dropShadow">
					<feFlood
						flood-opacity="0.35"
						flood-color="rgb(0,0,0)"
						result="flood"
						id="flood" />
					<feComposite
						in="flood"
						in2="SourceGraphic"
						operator="in" />
					<feGaussianBlur
						stdDeviation="2" />
					<feOffset
						dx="0"
						dy="1" />
				</filter>

				<rect id="card" rx="2px" ry="2px" />
			</defs>

			<use xlink:href="#card" id="shadow" p:heavy="true" p:filter="url(#dropShadow)" />
			<use xlink:href="#card" />

		</p:Content>
	</Shape>


	<Shape id="Text" displayName="Text" icon="Icons/Text.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">96,36</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color">#FFFFFF00</Property>
			</PropertyGroup>

			<PropertyGroup name="Text">
				<Property name="label" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: Bound.fromBox($box, 0, 5), font: $textFont, align: $textAlign, multi: true})"><![CDATA[Text]]></Property>

				<Property name="weight" displayName="Font weight" type="Enum"
					p:enumValues="['100|Thin', '300|Light', '400|Normal', '500|Medium', '700|Bold', '900|Ultra-Bold']">400</Property>

				<Property name="textColor" displayName="Color"
					type="Color"><E>$$defaultTextColor</E></Property>
				<Property name="textFont"
					displayName="Font"
					type="Font"><E>$$defaultTextFont</E></Property>

				<Property name="textAlign" displayName="Text Alignment" type="Alignment">0,0</Property>
			</PropertyGroup>
		</Properties>
		<Behaviors>
			<For ref="bg">
				<Box>$box</Box>
				<Fill>$fillColor</Fill>
			</For>

			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="text">
				<DomContent>
					<![CDATA[

					var specs = [];

					var text = $label.value;

					var css = new CSS();

					css.set("display", "table-cell");
					css.set("height", $box.h + "px");
					css.set("width", $box.w + "px");

					collection.setCssTextAlignment(css, $textAlign.h, $textAlign.v);

					css.set("font-family", $textFont.getFamilies());
					css.set("font-size", $textFont.getPixelHeight() + "px");
					css.set("font-weight", $weight);

					specs.push({
						_name: "div",
						_uri: "http://www.w3.org/1999/xhtml",
						_text: text,
						style: css
					});

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>
                <Color>$textColor</Color>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<rect id="bg" />

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<div id="text">
				    	<!-- content -->
					</div>
				</div>
			</foreignObject>
		</p:Content>
	</Shape>

	<Shape id="Dialog" displayName="Dialog" icon="Icons/Dialog.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">280,224</Property>
				<Property name="shadow" displayName="Shadow" type="Bool">true</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Sheet Color" type="Color"><E>$$neutralFillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Actions>
			<Action id="getSnappingGuide">
				<Impl>
					var b = this.getBounding();
					return [
						new SnappingData("Top", b.y, "HCenter", false, this.id),
						new SnappingData("Bottom", b.y + b.height, "HCenter", false, this.id)
					];
				</Impl>
			</Action>
		</Actions>

		<Behaviors>
			<For ref="card">
				<Box>$box</Box>
				<Fill>$fillColor</Fill>
			</For>
			<For ref="shadow">
				<ApplyFilter>$shadow</ApplyFilter>
				<Visibility>$shadow</Visibility>
			</For>
		</Behaviors>
		<p:Content	 xmlns:p="http://www.evolus.vn/Namespace/Pencil"
										xmlns="http://www.w3.org/2000/svg">

			<defs>
				<filter id="dropShadow" height="1.28" y="-0.14">
					<feFlood
						flood-opacity="0.45"
						flood-color="rgb(0,0,0)"
						result="flood"
						id="flood" />
					<feComposite
						in="flood"
						in2="SourceGraphic"
						operator="in" />
					<feGaussianBlur
						stdDeviation="10" />
					<feOffset
						dx="0"
						dy="1" />
				</filter>

				<rect id="card" rx="2px" ry="2px" />
			</defs>

			<use xlink:href="#card" id="shadow" p:heavy="true" p:filter="url(#dropShadow)" />
			<use xlink:href="#card" />
		</p:Content>
	</Shape>

	<Shape id="Divider" displayName="Divider" icon="Icons/Divider.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockHeight="true">360,10</Property>
			</PropertyGroup>
			<PropertyGroup name="Line">
				<Property name="strokeColor" displayName="Line Color" type="Color">
				<E>$$strokeColor</E>
				</Property>
				<Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">
					<E>$$strokeStyle</E>
				</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bgRect">
				<Box>$box</Box>
			</For>
			<For ref="line">
				<Transform>[translate(($strokeStyle.w % 2) / 2, ($strokeStyle.w % 2) / 2)]</Transform>
				<D>[M(0, $box.h / 2), L($box.w, $box.h / 2)]</D>
				<StrokeColor>$strokeColor</StrokeColor>
				<StrokeStyle>$strokeStyle</StrokeStyle>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<rect id="bgRect" style="fill: #000000; fill-opacity: 0; stroke: none;" x="0" y="0" />
			<path style="fill:none;" d="M 0,0 L 4,4 L 0,8 z" id="line" />
		</p:Content>
	</Shape>

	<Shape id="menu" displayName="Menu List" icon="Icons/Menu.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">168,224</Property>
				<Property name="scrollbar" displayName="Scrollbar" type="Bool">false</Property>
				<Property name="shadow" displayName="Shadow" type="Bool">true</Property>
				<Property name="forceFont" displayName="Force Roboto font" type="Bool">false</Property>
			</PropertyGroup>

			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Sheet Color" type="Color"><E>$$neutralFillColor</E></Property>
			</PropertyGroup>

			<PropertyGroup name="Text">
				<Property name="contentText" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: Bound.fromBox($box, 0, 5), font: $textFont, align: new Alignment(0, 0), multi: true})"><![CDATA[MenuItem*
MenuItem
MenuItem]]></Property>
				<Property name="textFont" displayName="Default Font" type="Font">"Roboto Light", Roboto,sans-serif|300|normal|16px</Property>
				<Property name="textColor" displayName="Text Color" type="Color"><E>$$defaultTextColor</E></Property>
				<Property name="textAlign" displayName="Text Alignment" type="Alignment">1,1</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<Bound>Bound.fromBox($box)</Bound>
				<Fill>$fillColor</Fill>
			</For>

			<For ref="shadow">
				<ApplyFilter>$shadow</ApplyFilter>
				<Visibility>$shadow</Visibility>
			</For>

			<For ref="scrollbar">
				<Visibility>$scrollbar</Visibility>
				<Transform>[translate($box.w - 4, 0), scale(1, $box.h * 0.75)]</Transform>
			</For>

			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="list">
				<DomContent>
					<![CDATA[

					var items = $contentText.value.split(/[\r\n]+/);

					var specs = [];

					for (var i = 0; i < items.length; i++) {
						var text = items[i];

						var css = CSS.fromString("padding: 14px 16px;");

						if (text.match(/(.*)\*$/)) {
							text = RegExp.$1;
							css.set("background", "rgba(0, 0, 0, 0.05)");
						}

						if ($forceFont == "true") {
							css.set("font-family", "Roboto, Roboto Light, sans-serif");
							css.set("font-weight", "300");
						}

						specs.push({
							_name: "li",
							_uri: "http://www.w3.org/1999/xhtml",
							_text: text,
							style: css
						});
					}

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>

				<Font>$textFont</Font>
                <Color>$textColor</Color>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">

			<defs>
				<filter id="dropShadow">
					<feFlood
						flood-opacity="0.35"
						flood-color="rgb(0,0,0)"
						result="flood"
						id="flood" />
					<feComposite
						in="flood"
						in2="SourceGraphic"
						operator="in" />
					<feGaussianBlur
						stdDeviation="2" />
					<feOffset
						dx="0"
						dy="1" />
				</filter>

				<rect id="bg" rx="2px" ry="2px" />
			</defs>

			<use xlink:href="#bg" id="shadow" p:heavy="true" p:filter="url(#dropShadow)" />
			<use xlink:href="#bg" />

			<rect id="scrollbar" width="4px" height="1px" style="fill:#000000;fill-opacity:0.12" />

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<ul id="list" style="list-style: none;
							text-indent: 0;
							padding: 8px 0;
							font-family: Roboto, 'Roboto Medium', sans-serif;
							font-size: 16px;
							font-weight: 300;">
				    	<!-- content -->
					</ul>
				</div>
			</foreignObject>
		</p:Content>
	</Shape>

	<Shape id="LoadingSpinner" displayName="Loading Spinner" icon="Icons/LoadingSpinner.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockRatio="true">42,42</Property>
			</PropertyGroup>
			<PropertyGroup name="Line">
				<Property name="fillColor" displayName="Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="outer">
				<StrokeColor>$fillColor</StrokeColor>
				<Transform>scale($box.w / 42, $box.h / 42)</Transform>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<path
				d="M 40,21 C 40,31.493408 31.49341,40 21,40 10.506589,40 2,31.493408 2,21 2,10.506589 10.506589,2 21,2 c 0,0 0,0 0,0"
				id="outer"
				style="fill:#000000;fill-opacity:0;stroke-width:4;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
		</p:Content>
	</Shape>

	<Shape id="ProgressBar" displayName="Progress Bar" icon="Icons/ProgressBar.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockHeight="true">360,4</Property>
                <Property name="prog" displayName="Progress" type="Handle" p:lockY="true" p:minX="0" p:maxX="$box.w">200,0</Property>
                <Property name="buffer" displayName="Buffer Progress" type="Handle" p:lockY="true" p:minX="0" p:maxX="$box.w">280,0</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="bgFillColor" displayName="Background Color" type="Color"><E>$$fillColor.hollowed(0.7)</E></Property>
			</PropertyGroup>

			<PropertyGroup name="Foreground">
				<Property name="fgFillColor" displayName="Foreground Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bgRect">
				<Box>new Dimension($buffer.x, $box.h)</Box>
				<Fill>$bgFillColor</Fill>
			</For>
			<For ref="fgRect">
				<Box>new Dimension($prog.x, $box.h)</Box>
				<Fill>$fgFillColor</Fill>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<rect id="bgRect" />
			<rect id="fgRect" />
		</p:Content>
	</Shape>

	<Shape id="Slider" displayName="Slider" icon="Icons/Slider.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockHeight="true">360,10</Property>
                <Property name="prog" displayName="Value" type="Handle" p:lockY="true" p:minX="0" p:maxX="$box.w">200,0</Property>
                <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="bgFillColor" displayName="Background Color" type="Color">#00000040</Property>
			</PropertyGroup>

			<PropertyGroup name="Foreground">
				<Property name="fgFillColor" displayName="Foreground Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bgRect">
				<Box>new Dimension($box.w - ($disabled.value ? $prog.x + 6 : $prog.x), 2)</Box>
				<Transform>[translate($disabled.value ? $prog.x + 6 : $prog.x, 0)]</Transform>
				<Fill>$bgFillColor</Fill>
			</For>
			<For ref="fgRect">
				<Box>new Dimension($disabled.value ? $prog.x - 6 : $prog.x, 2)</Box>
				<Fill>$disabled.value ? $bgFillColor : $fgFillColor</Fill>
			</For>
			<For ref="thumb">
				<EllipseFit>new Dimension($disabled.value ? 8 : 12, $disabled.value ? 8 : 12)</EllipseFit>
				<Fill>$disabled.value ? $bgFillColor : $fgFillColor</Fill>
				<Transform>[translate($disabled.value ? $prog.x - 4 : $prog.x - 6, $disabled.value ? 1 : -1)]</Transform>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<rect id="bgRect" y="4px" />
			<rect id="fgRect" y="4px" />
			<ellipse id="thumb" />
		</p:Content>
	</Shape>

	<Shape id="Switch" displayName="Switch" icon="Icons/Switch.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension" p:lockHeight="true" p:lockWidth="true">36,14</Property>
                <Property name="on" displayName="On" type="Bool">true</Property>
                <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
                <Property name="shadow" displayName="Shadow" type="Bool">true</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bgRect">
				<Box>$box</Box>
				<Fill>$disabled.value ? Color.fromString("#000000").hollowed(0.88) : $on.value ? $fillColor.hollowed(0.5) : Color.fromString("#000000").hollowed(0.74)</Fill>
			</For>
			<For ref="thumb">
				<Fill>$disabled.value ? Color.fromString("#BDBDBD") : $on.value ? $fillColor : Color.fromString("#fafafa")</Fill>
				<Transform>[translate($on.value ? $box.w - 10: 10,0)]</Transform>
				<ApplyFilter>true</ApplyFilter>
			</For>
			<For ref="shadow">
				<ApplyFilter>$shadow</ApplyFilter>
				<Visibility>$shadow</Visibility>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">

			<defs>
				<filter id="dropShadow" height="1.5" y="-0.25" width="1.37" x="-0.2">
					<feFlood
						flood-opacity="0.4"
						flood-color="rgb(0,0,0)"
						result="flood"
						id="flood" />
					<feComposite
						in="flood"
						in2="SourceGraphic"
						operator="in" />
					<feGaussianBlur
						stdDeviation="1" />
					<feOffset
						dx="0"
						dy="1.5" />
				</filter>

				<ellipse id="thumb" rx="10px" ry="10px" cy="7px" />
			</defs>

			<rect id="bgRect" rx="7px" ry="7px" />
			<use xlink:href="#thumb" id="shadow" p:heavy="true" p:filter="url(#dropShadow)" />
			<use xlink:href="#thumb" />
		</p:Content>
	</Shape>

	<Shape id="Checkbox" displayName="Checkbox" icon="Icons/Checkbox.png">
		<Properties>
			<PropertyGroup>
                <Property name="on" displayName="On" type="Bool">true</Property>
                <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="on">
				<Visibility>$on</Visibility>
				<Fill>$disabled.value ? Color.fromString("#000000").hollowed(0.74) : $fillColor</Fill>
			</For>
			<For ref="off">
				<Visibility>$on.negative()</Visibility>
				<StrokeColor>$disabled.value ? Color.fromString("#000000").hollowed(0.74) : Color.fromString("#000000").hollowed(0.54)</StrokeColor>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<path
				id="on"
				d="M 2,0 C 0.892,0 0,0.892 0,2 l 0,14 c 0,1.108 0.892,2 2,2 l 14,0 c 1.108,0 2,-0.892 2,-2 L 18,2 C 18,0.892 17.108,0 16,0 L 2,0 z m 12.5,3.90625 1.1875,1.1875 -8.125,8.125 L 6.96875,13.8125 6.375,13.21875 2.28125,9.125 3.46875,7.90625 6.96875,11.4375 14.5,3.90625 z" />
			<rect
				id="off"
				rx="2px" ry="2px" width="16px" height="16px" x="1px" y="1px"
				style="fill:#000000;fill-opacity:0;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0" />
		</p:Content>
	</Shape>

	<Shape id="RadioButton" displayName="Radio Button" icon="Icons/RadioButton.png">
		<Properties>
			<PropertyGroup>
                <Property name="on" displayName="On" type="Bool">true</Property>
                <Property name="disabled" displayName="Disabled" type="Bool">false</Property>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="inner">
				<Visibility>$on</Visibility>
				<Fill>$disabled.value ? Color.fromString("#000000").hollowed(0.74) : $fillColor</Fill>
			</For>
			<For ref="outer">
				<StrokeColor>$disabled.value ? Color.fromString("#000000").hollowed(0.74) : $on.value ? $fillColor : Color.fromString("#000000").hollowed(0.54)</StrokeColor>
			</For>
		</Behaviors>
		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<ellipse id="inner"
				rx="5px" ry="5px" cx="10px" cy="10px" />
			<ellipse id="outer"
				rx="9px" ry="9px" cx="10px" cy="10px"
				style="fill:#000000;fill-opacity:0;stroke-width:2;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0" />
		</p:Content>
	</Shape>

	<Shape id="Tooltip" displayName="Tooltip" icon="Icons/Tooltip.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">113,32</Property>
				<Property name="forceFont" displayName="Force Roboto font" type="Bool">false</Property>
			</PropertyGroup>

			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Background Color" type="Color">#757575E6</Property>
			</PropertyGroup>

			<PropertyGroup name="Text">
				<Property name="contentText" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: Bound.fromBox($box, 0, 5), font: $textFont, align: new Alignment(0, 0), multi: false})"><![CDATA[Tooltip text]]></Property>
				<Property name="textFont" displayName="Default Font" type="Font">"Roboto Medium", Roboto,sans-serif|500|normal|14px</Property>
				<Property name="textColor" displayName="Text Color" type="Color">#FFFFFFFF</Property>
				<Property name="textAlign" displayName="Text Alignment" type="Alignment">1,1</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<Bound>Bound.fromBox($box)</Bound>
				<Fill>$fillColor</Fill>
			</For>

			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="list">
				<DomContent>
					<![CDATA[

					var specs = [];

					var text = $contentText.value;

					var css = new CSS()

					css.set("padding", "8px 16px");
					css.set("display", "table-cell");
					css.set("height",($box.h - 8*2) + "px");
					css.set("width",($box.w - 16*2) + "px");

					collection.setCssTextAlignment(css, $textAlign.h, $textAlign.v);

					if ($forceFont == "true") {
						css.set("font-family", "Roboto, Roboto Medium, sans-serif");
						css.set("font-weight", "500");
					}

					specs.push({
						_name: "div",
						_uri: "http://www.w3.org/1999/xhtml",
						_text: text,
						style: css
					});

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>

				<Font>$textFont</Font>
                <Color>$textColor</Color>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">


			<rect id="bg" rx="2px" ry="2px" />

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<div id="list">
				    	<!-- content -->
					</div>
				</div>
			</foreignObject>
		</p:Content>
	</Shape>

	<Shape id="SnackbarFloating" displayName="Snackbar (floating)" icon="Icons/SnackbarFloating.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">220,48</Property>
				<Property name="forceFont" displayName="Force Roboto font" type="Bool">false</Property>
				<Property name="rounded" displayName="Rounded corners" type="Bool">true</Property>
				<Property name="toast" displayName="Toast style" type="Bool">false</Property>
			</PropertyGroup>


			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Background Color" type="Color">#323232FF</Property>
			</PropertyGroup>

			<PropertyGroup name="Text">
				<Property name="contentText" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: Bound.fromBox($box, 0, 5), font: $textFont, align: new Alignment(0, 0), multi: false})"><![CDATA[Snackbar text]]></Property>
				<Property name="textFont" displayName="Default Font" type="Font">Roboto,sans-serif|500|normal|14px</Property>
				<Property name="textColor" displayName="Text Color" type="Color">#FFFFFFFF</Property>
				<Property name="textAlign" displayName="Text Alignment" type="Alignment">0,1</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<Bound>Bound.fromBox($box)</Bound>
				<Fill>$fillColor</Fill>
				<Radius>
					<Arg>$rounded.value ? ($toast.value ? 22 : 2) : 0</Arg>
					<Arg>$rounded.value ? ($toast.value ? 22 : 2) : 0</Arg>
				</Radius>
			</For>

			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="list">
				<DomContent>
					<![CDATA[

					var specs = [];

					var text = $contentText.value;

					var css = new CSS()

					css.set("padding", "12px 24px");
					css.set("display", "table-cell");
					css.set("height",($box.h - 12*2) + "px");
					css.set("width",($box.w - 24*2) + "px");

					collection.setCssTextAlignment(css, $textAlign.h, $textAlign.v);

					if ($forceFont == "true") {
						css.set("font-family", "Roboto, Roboto Medium, sans-serif");
						css.set("font-weight", "500");
					}

					specs.push({
						_name: "div",
						_uri: "http://www.w3.org/1999/xhtml",
						_text: text,
						style: css
					});

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>

				<Font>$textFont</Font>
                <Color>$textColor</Color>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">


			<rect id="bg" />

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<div id="list">
				    	<!-- content -->
					</div>
				</div>
			</foreignObject>
		</p:Content>
	</Shape>

	<Shortcut displayName="Snackbar (full-width)" icon="Icons/SnackbarFull.png" to="SnackbarFloating">
		<PropertyValue name="box">360,48</PropertyValue>
		<PropertyValue name="rounded">false</PropertyValue>
	</Shortcut>

	<Shortcut displayName="Toast" icon="Icons/Toast.png" to="SnackbarFloating">
		<PropertyValue name="contentText"><![CDATA[Toast text]]></PropertyValue>
		<PropertyValue name="rounded">true</PropertyValue>
		<PropertyValue name="toast">true</PropertyValue>
	</Shortcut>

	<Shape id="TextField" displayName="Text Field" icon="Icons/TextField.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">113,48</Property>
				<Property name="forceFont" displayName="Force Roboto font" type="Bool">false</Property>
				<Property name="focused" displayName="Focused" type="Bool">false</Property>
				<Property name="disabled" displayName="Disabled" type="Bool">false</Property>
			</PropertyGroup>

			<PropertyGroup name="Line">
				<Property name="focusColor" displayName="Focused Color" type="Color"><E>$$fillColor</E></Property>
				<Property name="fillColor" displayName="Normal Color" type="Color">#C8C8C8FF</Property>
			</PropertyGroup>

			<PropertyGroup name="Content">
				<Property name="contentText" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: new Bound(0, 22, $box.w, 20), font: $textFont, align: new Alignment(0, 0), multi: false})"><![CDATA[Content text]]></Property>
				<Property name="textFont" displayName="Default Font" type="Font">Roboto,sans-serif|500|normal|16px</Property>
				<Property name="textColor" displayName="Text Color" type="Color"><E>$$defaultTextColor</E></Property>
				<Property name="textAlign" displayName="Text Alignment" type="Alignment">0,2</Property>
			</PropertyGroup>

			<PropertyGroup name="Label">
				<Property name="labelText" displayName="Label Text" type="PlainText" p:editInfo="({targetName: 'fakeLabel', bound: new Bound(0, 0, $box.w, 20), font: $textFont, align: new Alignment(0, 0), multi: false})"><![CDATA[Label text]]></Property>
				<Property name="labelFont" displayName="Default Font" type="Font">Roboto, sans-serif|500|normal|12px</Property>
				<Property name="labelColor" displayName="Text Color" type="Color">#757575FF</Property>
				<Property name="labelAlign" displayName="Text Alignment" type="Alignment">0,0</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="text">
				<DomContent>
					<![CDATA[

					var contentText = $contentText.value;
					var labelText = $labelText.value;

					var disabledColor = $textColor.hollowed(0.74).toRGBAString();

					var specs = [];

					var labelCss = new CSS();
					var contentCss = new CSS();

					labelCss.set("color", $disabled.value ? disabledColor : $labelColor.toRGBAString());
					labelCss.set("font", $labelFont.toCSSFontString());
					collection.setCssTextAlignment(labelCss, $labelAlign.h, $labelAlign.v);

					contentCss.set("padding", "8px 0px");
					contentCss.set("display", "table-cell");
					contentCss.set("height", ($box.h - 8*2) - $labelFont.getPixelHeight() + "px");
					contentCss.set("width", $box.w + "px");
					contentCss.set("font", $textFont.toCSSFontString());
					contentCss.set("color", $disabled.value ? disabledColor : $textColor.toRGBAString());
					collection.setCssTextAlignment(contentCss, $textAlign.h, $textAlign.v);

					if ($forceFont == "true") {
						contentCss.set("font-family", "Roboto, sans-serif");
						contentCss.set("font-weight", "500");
						labelCss.set("font-family", "Roboto, sans-serif");
						labelCss.set("font-weight", "500");
					}

					if (contentText.trim().length === 0 && !$focused.value) {
						contentText = labelText;
						labelCss.set("visibility", "hidden");
						contentCss.set("color", disabledColor);
					} else if (labelText.trim().length === 0) {
						labelText = "Label";
						labelCss.set("visibility", "hidden");
					}

					specs.push({
						_name: "div",
						_uri: "http://www.w3.org/1999/xhtml",
						_text: labelText,
						style: labelCss
					});

					specs.push({
						_name: "div",
						_uri: "http://www.w3.org/1999/xhtml",
						_text: contentText,
						style: contentCss
					});

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>
			</For>

			<For ref="fakeLabel">
				<Box>new Dimension($box.w, $labelFont.getPixelHeight())</Box>
			</For>

			<For ref="line">
				<D>[M(0, $box.h), L($box.w, $box.h)]</D>
				<StrokeColor>($focused.value &amp;&amp; !$disabled.value) ? $focusColor : $fillColor</StrokeColor>
				<StrokeStyle>StrokeStyle.fromString($disabled.value ? "1|1,3" : ($focused.value ? "2|" : "1|"))</StrokeStyle>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<div id="text">
				    	<!-- content -->
					</div>
				</div>
			</foreignObject>

			<rect id="fakeLabel" style="fill:#000000;fill-opacity:0;" />

			<path  d="M 0,0 L 4,4 L 0,8 z" id="line" />
		</p:Content>
	</Shape>

	<Shape id="tabs" displayName="Tabs" icon="Icons/Tabs.png">
		<Properties>
			<PropertyGroup>
				<Property name="box" type="Dimension">360,48</Property>
				<Property name="forceFont" displayName="Force Roboto font" type="Bool">false</Property>
				<Property name="highlightText" displayName="Text color same as tab indicator" type="Bool">true</Property>
			</PropertyGroup>

			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Background Color" type="Color"><E>$$fillColor</E></Property>
			</PropertyGroup>

			<PropertyGroup name="Highlight">
				<Property name="highlightColor" displayName="Highlight Color" type="Color">#FFFFFFFF</Property>
			</PropertyGroup>

			<PropertyGroup name="Text">
				<Property name="contentText" displayName="Text Content" type="PlainText" p:editInfo="({targetName: 'content', bound: Bound.fromBox($box, 0, 5), font: $textFont, align: $textAlign, multi: true})"><![CDATA[ITEM 1*|ITEM 2|ITEM 3]]></Property>
				<Property name="textFont" displayName="Default Font" type="Font">Roboto,sans-serif|500|normal|14px</Property>
				<Property name="textColor" displayName="Text Color" type="Color">#FFFFFF99</Property>
				<Property name="textAlign" displayName="Text Alignment" type="Alignment">1,1</Property>
			</PropertyGroup>
		</Properties>

		<Behaviors>
			<For ref="bg">
				<Bound>Bound.fromBox($box)</Bound>
				<Fill>$fillColor</Fill>
			</For>

			<For ref="content">
				<Bound>new Bound(0, 0, $box.w, $box.h)</Bound>
			</For>

			<For ref="list">
				<DomContent>
					<![CDATA[

					var items = $contentText.value.split(/\|+/);

					var specs = [];

					for (var i = 0; i < items.length; i++) {
						var text = items[i];

						var css = new CSS();
						css.set("color", $textColor.toRGBAString());
						css.set("background", $fillColor.toRGBAString());
						css.set("display", "table-cell");
						css.set("margin", "0");
						css.set("height", $box.h + "px");
						css.set("width", $box.w + "px");

						collection.setCssTextAlignment(css, $textAlign.h, $textAlign.v);

						if (text.match(/(.*)\*$/)) {
							text = RegExp.$1;
							css.set("box-shadow", "inset 0 -2px 0 0 " + $highlightColor.toRGBAString());
							css.set("color", $highlightText.value ? $highlightColor.toRGBAString() : $textColor.toRGBString());
						}

						if ($forceFont == "true") {
							css.set("font-family", "Roboto, sans-serif");
							css.set("font-weight", "500");
						}

						specs.push({
							_name: "li",
							_uri: "http://www.w3.org/1999/xhtml",
							_text: text,
							style: css
						});
					}

					Dom.newDOMFragment(specs);
					]]>
				</DomContent>

				<Font>$textFont</Font>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil" xmlns="http://www.w3.org/2000/svg">
			<rect id="bg" />

			<foreignObject id="content">
				<div xmlns="http://www.w3.org/1999/xhtml" >
					<ul id="list" style="list-style: none;
							text-indent: 0;
							padding: 0 0;">
				    	<!-- content -->
					</ul>
				</div>
			</foreignObject>
		</p:Content>
	</Shape>

	<Shape id="Phone" displayName="Phone" icon="Icons/Phone.png">
		<Properties>
			<PropertyGroup>
			</PropertyGroup>
			<PropertyGroup name="Background">
				<Property name="fillColor" displayName="Background color" type="Color">#000000FF</Property>
			</PropertyGroup>
		</Properties>

		<Actions>
			<Action id="getSnappingGuide">
				<Impl>
				var b = this.getBounding();
				return [
					new SnappingData("InnerLeft", b.x + 18, "Left", true, this.id),
					new SnappingData("InnerRight", b.x + b.width - 18, "Right", true, this.id),
					new SnappingData("InnerTop", b.y + 68, "Top", false, this.id),
					new SnappingData("InnerBottom", b.y + 68 + 640, "Bottom", false, this.id)
				];
				</Impl>
			</Action>
		</Actions>

		<Behaviors>
			<For ref="phone">
				<Fill>$fillColor</Fill>
			</For>
		</Behaviors>

		<p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
		           xmlns="http://www.w3.org/2000/svg">

			<path id="phone" d="M 196.4687,0.00219 C 140.2618,-0.10611 84.5791,3.79919 30.1563,12.03339 16.1048,14.20359 10e-5,26.23049 0,42.93969 l 0,712.8437 c 1e-4,16.7092 16.1048,28.7359 30.1563,30.9062 112.0799,15.8578 229.0941,16.1103 335.6874,0 14.0514,-2.1703 30.1563,-14.197 30.1563,-30.9062 l 0,-712.8437 c 0,-16.7092 -16.105,-28.7361 -30.1563,-30.9063 -56.4368,-7.8015 -113.168,-11.923 -169.375,-12.0312 z m -178.4687,68 360,0 0,640 -360,0 0,-640 z"/>

		</p:Content>
	</Shape>
</Shapes>
